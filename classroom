#!/usr/bin/python3

import argparse
import sys
import textwrap
import os

args=None

#============================================================================
#
#   classroom - a template for organizing classroom context for
#               students based on a set of action and setup config.
#   
#============================================================================

def help_main(exit_status):
    print(textwrap.dedent("""
        Description:
          'classroom' manages sessions for running a class where each 
          student session can be added for each type of class and actions 
          can be run on those sessions. a class is defined by series of scripts
          provided by the user. script language is decided by the user.

        Optional Flags:
          --verbose, -v     additional output is generated
          --help, -h        contextual help information provided 
          --path, -p        the path to classroom config directory if not default
                            default is $HOME/.classroom
                            defaults can also be superceeded by env $CLASSROOM_PATH

        Commands:
          classroom class add       create a classroom template
          classroom class rm        destroy a classroom template
          classroom session add     add a student session to a classroom
          classroom session rm      remove one or more student sessions
          classroom session action  execute an action on one or more sessions
          classroom list            list sessions or session information

    """))
    exit(exit_status)

def main():

    global args

    parser = argparse.ArgumentParser( add_help=False , usage=None )
    parser.add_argument('--help','-h', action='store_true')
    parser.add_argument('--force','-f', action='store_true', help=argparse.SUPPRESS)
    parser.add_argument('--verbose','-v', action='store_true')
    parser.add_argument('--path','-p')
    parser.add_argument('--debug','-d', action='store_true', help=argparse.SUPPRESS)
    parser.add_argument('--linked','-l', action='store_true', help=argparse.SUPPRESS)
    parser.add_argument('params', nargs='*')
    args=parser.parse_args()
    debug("ARGS ",args)
    debug("CLASSROOM_PATH",classroom_path())

    # process main command and help indicators
    pars=args.params[1:]
    if len(args.params)==0 :
        cmd="help"
        args.help=True
    else:
        cmd=args.params[0] 
    debug("CMD = %s"%(cmd))
    debug("HELP = %s"%(args.help))
    if args.help:
        pars.insert(0,"help") 

    # run a command or drop out to help
    if   abbrev_match(cmd,"class"):   run_class(pars)
    elif abbrev_match(cmd,"session"): run_session(pars)
    elif abbrev_match(cmd,"list"):    run_list(pars)
    elif abbrev_match(cmd,"config"):  run_config(pars)
    elif cmd == "help":               help_main(0)
    else:
        error("ERROR: no such command as '%s'."%(cmd))
        error("run 'classroom help' for valid options.")
        exit(2)

#============================================================================

# General functions 

# debug output - none advertized feature

def out_format(s):
    result=""
    for n in s:
        if result=="": 
            result=str(n)
        else:
            result=result+" "+str(n)
    return result

def debug(*s):
    if args.debug :
        print(out_format(s))

# verbose output - automatically included with debug flag
def verbose(*s):
    if args.verbose or args.debug:
        print(out_format(s))

# error output 
def error(*s):
    print(out_format(s),file=sys.stderr)

# allow for shortening of keywords for convenience
# my matching a minimum length for uniqueness
def abbrev_match(s,keyword,min_length=2):
    debug("abbrev_match()",s,keyword,keyword[:len(s)])
    if len(s)>=min_length and s==keyword[:len(s)] :
        debug("found")
        return(True)
    return(False);

# get the path to the main command config directory
def classroom_path():
    if args.path:
        if os.path.isdir(args.path):
            return(args.path)
        error("ERROR specified --path directory does not exist",args.path)
    elif os.environ.get('CLASSROOM_PATH'):
        if os.path.isdir(os.environ['CLASSROOM_PATH']):
            return(os.environ['CLASSROOM_PATH'])
        error("ERROR env var CLASSROOM_PATH directory does not exists",os.environ['CLASSROOM_PATH'])
    else:
        if not os.path.isdir(os.environ['HOME']+"/.classroom"):
            verbose("creating command database "+os.environ['HOME']+"/.classroom")
            os.mkdir(os.environ['HOME']+"/.classroom")
        os.chmod(os.environ['HOME']+"/.classroom",0o0755)
        return(os.environ['HOME']+"/.classroom")
    exit(2)
    
#============================================================================

def help_class(exit_status):
    print(textwrap.dedent("""
        Description:
          allows the adding and removing of class templates.

        Format:
          <class_name>   [a-z][a-z0-9]{2-9} lowercase alpha-numeric
                         3-10 characters long, leading alpha.
          <config_dir>   path to a readable class config directory
          <config_yaml>  path to a readable class config yaml file
            
        Optional Flags: 
          --force, -f    if adding this will replace an existing class 
                         if removing will not prompt 'are you sure (y/n)'

          classroom class add <class_name> <config_dir>
          classroom class rm <class_name> <config_yaml>

    """))
    exit(exit_status)

def run_class(params):
    debug("run_class()",",".join(params))
    if len(params)==0 or params[0]=="help" :
        help_class(0)
    elif abbrev_match(params[0],"add"):
        run_class_add(params[1:])
    elif abbrev_match(params[0],"rm"):
        run_class_rm(params[1:])
    else:
        error("ERROR: classroom class '%s' command not recognized"%(params[0]))
        error("run 'classroom class help' for valid options.")
        exit(2)

#============================================================================

def run_class_add(params):
    verbose("run_class_add()",",".join(params))
    if len(params)==0 or params[0]=="help":
        help_class(0)
    print("This function is not yet implemented (class add)")

#============================================================================

def run_class_rm(params):
    verbose("run_class_rm()",",".join(params))
    if len(params)==0 or params[0]=="help":
        help_class(0)
    print("This function is not yet implemented (class rm)")

#============================================================================

def help_session(exit_status):
    print("session help missing - FIX")
    exit(exit_status)

def run_session(params):
    debug("run_session()",",".join(params))
    if len(params)==0 or params[0]=="help":
        help_session(0)
    elif abbrev_match(params[0],"add"):
        run_session_add(params[1:])
    elif abbrev_match(params[0],"rm"):
        run_session_rm(params[1:])
    elif abbrev_match(params[0],"action"):
        run_session_action(params[1:])
    else:
        error("ERROR: classroom session '%s' command not recognized"%(params[0]))
        error("run 'classroom session help' for valid options.")
        exit(2)

#============================================================================

def run_session_add(params):
    verbose("run_session_add()",",".join(params))
    if len(params)==0 or params[0]=="help":
        help_session(0)
    print("This function is not yet implemented (session add)")

#============================================================================

def run_session_rm(params):
    verbose("run_session_rm()",",".join(params))
    if len(params)==0 or params[0]=="help":
        help_session(0)
    print("This function is not yet implemented (session rm)")

#============================================================================

def run_session_action(params):
    verbose("run_session_action()",",".join(params))
    if len(params)==0 or params[0]=="help":
        help_session(0)
    print("This function is not yet implemented (session action)")

#============================================================================

def help_list(exit_status):
    print("list help missing - FIX")
    exit(exit_status)

def run_list(params):
    verbose("run_list()",",".join(params))
    if len(params)>0 and params[0]=="help":
        help_list(0)
    print("This function is not yet implemented (list)")

#============================================================================

def help_config(exit_status):
    print("config help missing - FIX")
    exit(exit_status)

def run_config(params):
    verbose("run_config()",",".join(params))
    if len(params)>0 and params[0]=="help":
        help_config(0) 
    print("This function is not yet implemented (config)")

#============================================================================

main()

exit(0)

